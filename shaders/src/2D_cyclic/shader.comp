#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(std140, binding = 4) uniform BaseConfig {
  ivec2 map_resolution;
  int state_count;
  int read_row; //iteration
};

layout(std140, binding = 5) uniform Config {
  int threshold;
  int state_insensitive;
  int offset_count;
  ivec4 offsets[221];
};

layout(std430, binding = 2) buffer StateMap {
  int state_map[];
};

layout(std430, binding = 6) readonly buffer StateMapCopy {
  int state_map_copy[];
};

ivec2 accessOffset(uint index) {
  ivec4 offset = offsets[index >> 1];
  int shift = 2 * int(index & 0x1);
  return ivec2(offset[shift], offset[shift + 1]);
}

ivec2 processPosition(ivec2 position) {
  if (position.x < 0) {
    position.x = map_resolution.x - position.x;
  } else if (position.x >= map_resolution.x) {
    position.x = position.x - map_resolution.x;
  }
  if (position.y < 0) {
    position.y = map_resolution.y - position.y;
  } else if (position.y >= map_resolution.y) {
    position.y = position.y - map_resolution.y;
  }

  return position;
}

void main() {
  int i = int (
      gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y +
      gl_GlobalInvocationID.y * gl_NumWorkGroups.x +
      gl_GlobalInvocationID.x
  );

  ivec2 base_position = ivec2(i % map_resolution.x, i / map_resolution.y);
  int base_state = state_map_copy[i];
  int sum=0;
  if (state_insensitive == 1) {
    for (int i=0; i<offset_count; ++i) {
      ivec2 offset = accessOffset(i);
      ivec2 position = base_position + offset;
      position = processPosition(position);
      if (state_map_copy[position.x + position.y * map_resolution.x] > 0) {
        ++sum;
      }
    }
  } else {
    for (int i=0; i<offset_count; ++i) {
      ivec2 offset = accessOffset(i);
      ivec2 position = base_position + offset;
      position = processPosition(position);
      if (state_map_copy[position.x + position.y * map_resolution.x] == base_state + 1) {
        ++sum;
      }
    }
  }

  if (base_state == 0) {
    if (sum >= threshold) {
      state_map[i] = 1;
    }
  } else {
    if (sum >= threshold) {
      state_map[i] = base_state + 1 >= state_count ? base_state : base_state + 1;
    } else {
      state_map[i] = 0;
    }
  }
}
