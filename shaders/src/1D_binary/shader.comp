#version 450 core

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

const int MAX_PATTERN_COUNT = 16; // 2*range + 1, 2^9 = 512, 512 / 32 = 16 

layout(std140, binding = 4) uniform BaseConfig {
  ivec2 map_resolution;
  int state_count;
  int read_row; //iteration
};

layout(std140, binding = 5) uniform Config {
  int range; // lim = 4
  uvec4 pattern_match_code[MAX_PATTERN_COUNT/4];
};

layout(std430, binding = 2) buffer StateMap {
  int state_map[];
};

bool isSet(uint i) {
  return (pattern_match_code[i >> 7 /* /32 /4 */][(i >> 5) & 0x3] & uint(1 << (i & uint(0x1F) /* % 32 */))) > uint(0) ? true : false;
}

void main() {
  int i = int (
    gl_GlobalInvocationID.z * gl_NumWorkGroups.x * gl_NumWorkGroups.y +
    gl_GlobalInvocationID.y * gl_NumWorkGroups.x +
    gl_GlobalInvocationID.x
  );

  int lhs_border_index_read = read_row * map_resolution.x;
  int rhs_border_index_read = lhs_border_index_read + map_resolution.x;

  int base_index_read = lhs_border_index_read + i;
  int base_index_write = ((read_row + 1) % map_resolution.y) * map_resolution.x + i;

  uint pattern_bitset = uint(0);
  for(int c=-range; c<=range; ++c) {
    int index = base_index_read + c;
    if(index < lhs_border_index_read) {
      index = rhs_border_index_read + c;
    } else if(index >= rhs_border_index_read) {
      index = lhs_border_index_read - 1 + c;
    }
    if(state_map[index] > 0) {
      pattern_bitset |= ( uint(1) << (-c + range) );
    }
  }

  if(state_map[base_index_write] > 0) {
    if(isSet(pattern_bitset)) {
      int new_state = state_map[base_index_write] + int(1);
      state_map[base_index_write] = new_state >= state_count ? new_state - 1 : new_state;
    } else {
      state_map[base_index_write] = 0;
    }
  } else {
    if(isSet(pattern_bitset)) {
      state_map[base_index_write] = 1;
    }
  }
}